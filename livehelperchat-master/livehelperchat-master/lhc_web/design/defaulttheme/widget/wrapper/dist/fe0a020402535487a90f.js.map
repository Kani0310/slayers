{"version":3,"sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"names":["nodeJSChat","this","params","attributes","chatEvents","vid","userSession","getVID","socketOptions","hostname","path","authTokenName","port","parseInt","secure","socket","require","connect","connectSiteVisitor","sampleChannel","subscribe","on","err","console","error","watch","op","eventEmitter","emitEvent","chanelName","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","data","emit","hash","log","destroy","status","isAuthenticated","check_messages"],"mappings":"mbAAA,O,IAwFMA,EAAa,I,WApFf,c,4FAAc,SACVC,KAAKC,OAAS,GACdD,KAAKE,WAAa,KAClBF,KAAKG,WAAa,K,4CAGZF,EAAQC,EAAYC,GAC1BH,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,WAAaA,EAElB,IAAMC,EAAMJ,KAAKE,WAAWG,YAAYC,SAEpCC,EAAgB,CAChBC,SAAUP,EAAOO,SACjBC,KAAMR,EAAOQ,KACbC,cAAe,8BAGA,IAAfT,EAAOU,OACPJ,EAAcI,KAAOC,SAASX,EAAOU,OAGpB,GAAjBV,EAAOY,SACPN,EAAcM,QAAS,GAG3B,IAEIC,EAFgBC,EAAQ,IAEDC,QAAQT,GAMnC,SAASU,IACL,IAAIC,EAAgBJ,EAAOK,UAAU,MAAQf,GAE7Cc,EAAcE,GAAG,iBAAiB,SAAUC,GACxCC,QAAQC,MAAM,2DAA6DF,MAG/EH,EAAcM,OAAM,SAAUC,GACb,iBAATA,EAAGA,IACHvB,EAAWwB,aAAaC,UAAU,2BAb9Cb,EAAOM,GAAG,SAAS,SAAUC,GACzBC,QAAQC,MAAMF,MAiBlB,IAAIO,EAAa,MAAQxB,EAEzBU,EAAOM,GAAG,kBAAkB,WACxBS,kBAAgBC,YAAY5B,EAAW6B,QAAQC,KAAKC,aAAe/B,EAAA,KAAqB,4BAA6B,CAAED,OAAQ,CAACiC,IAAK,IAAIC,MAAQC,aAAa,SAACC,GAC3JvB,EAAOwB,KAAK,QAAS,CAACC,KAAMF,EAAMT,WAAYA,IAAa,SAAUP,GAC7DA,IACAC,QAAQkB,IAAInB,GACZP,EAAO2B,oBAMvB3B,EAAOM,GAAG,WAAW,SAAUsB,GACvBA,EAAOC,iBACP1B,IAEAf,EAAW6B,QAAQC,KAAKY,gBAAiB,GAEzCf,kBAAgBC,YAAY5B,EAAW6B,QAAQC,KAAKC,aAAe/B,EAAA,KAAqB,4BAA6B,CAAED,OAAQ,CAACiC,IAAK,IAAIC,MAAQC,aAAa,SAACC,GAC3JvB,EAAOwB,KAAK,QAAS,CAACC,KAAMF,EAAMT,WAAYA,IAAa,SAAUP,GAC7DA,EACAC,QAAQkB,IAAInB,IAEZJ,IAEAf,EAAW6B,QAAQC,KAAKY,gBAAiB,gB,QAU7D7C","file":"fe0a020402535487a90f.js","sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.connect(socketOptions);\n\n        socket.on('error', function (err) {\n            console.error(err);\n        });\n\n        function connectSiteVisitor(){\n            var sampleChannel = socket.subscribe('uo_' + vid);\n\n            sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });\n\n            sampleChannel.watch(function (op) {\n                if (op.op == 'check_message') {\n                    attributes.eventEmitter.emitEvent('checkMessageOperator');\n                }\n            });\n        }\n\n        var chanelName = 'uo_' + vid;\n\n        socket.on('deauthenticate', function() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, (data) => {\n                socket.emit('login', {hash: data, chanelName: chanelName}, function (err) {\n                    if (err) {\n                        console.log(err);\n                        socket.destroy();\n                    }\n                });\n            })\n        });\n\n        socket.on('connect', function (status) {\n            if (status.isAuthenticated) {\n                connectSiteVisitor();\n                // Disable check messages in case we connect to nodejs\n                attributes.LHC_API.args.check_messages = false;\n            } else {\n                helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, (data) => {\n                    socket.emit('login', {hash: data, chanelName: chanelName}, function (err) {\n                        if (err) {\n                            console.log(err);\n                        } else {\n                            connectSiteVisitor();\n                            // Disable check messages in case we connect to nodejs\n                            attributes.LHC_API.args.check_messages = false;\n                        }\n                    });\n                })\n            }\n        });\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"sourceRoot":""}