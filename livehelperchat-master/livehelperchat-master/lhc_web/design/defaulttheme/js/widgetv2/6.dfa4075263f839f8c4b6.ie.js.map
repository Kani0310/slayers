{"version":3,"sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"names":["nodeJSChat","this","socket","helperFunctions","eventEmitter","addListener","destroy","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","socketOptions","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","require","connect","sampleChannel","visitorTypingListener","data","status","publish","msg","messageSend","messageSendError","connectVisitor","subscribe","on","err","console","error","watch","op","text","ttx","hasIn","fetchMessages","get","checkChatStatus","sync_interval","removeListener","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","emit","hash","chanelName","log","isAuthenticated"],"mappings":"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","file":"6.dfa4075263f839f8c4b6.ie.js","sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus } from \"../../actions/chatActions\"\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.destroy();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socketCluster = require('socketcluster-client');\n\n        var socket = this.socket = socketCluster.connect(socketOptions);\n        \n        var sampleChannel = null;\n        \n        socket.on('error', function (err) {\n            console.error(err);\n        });\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.publish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.publish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.publish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.publish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.publish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        socket.on('close', function() {\n\n            if (sampleChannel !== null) {\n                sampleChannel.destroy();\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n\n        });\n\n        function connectVisitor(){\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });\n\n            sampleChannel.on('subscribe', function () {\n                socket.publish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+chatId : 'chat_'+chatId), {'op':'vi_online', status: true});\n            });\n\n            sampleChannel.watch(function (op) {\n                if (op.op == 'ot') { // Operator Typing Message\n                    if (op.data.status == true) {\n                        dispatch({\n                            'type': 'chat_status_changed',\n                            'data': {text: op.data.ttx}\n                        });\n                    } else {\n                        dispatch({\n                            'type': 'chat_status_changed',\n                            'data': {text: ''}\n                        });\n                    }\n                } else if (op.op == 'cmsg' || op.op == 'schange') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])){\n                        dispatch(fetchMessages({\n                            'chat_id': state.chatwidget.getIn(['chatData','id']),\n                            'hash' : state.chatwidget.getIn(['chatData','hash']),\n                            'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                            'theme' : state.chatwidget.get('theme')\n                        }));\n                    }\n                } else if (op.op == 'schange') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])){\n                        dispatch(checkChatStatus({\n                            'chat_id': state.chatwidget.getIn(['chatData','id']),\n                            'hash' : state.chatwidget.getIn(['chatData','hash']),\n                            'mode' : state.chatwidget.get('mode'),\n                            'theme' : state.chatwidget.get('theme')\n                        }));\n                    }\n                } else if (op.op == 'vo') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])) {\n                        socket.publish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                    }\n                }\n            });\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: 10000}\n            });\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        socket.on('deauthenticate', function(){\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                socket.emit('login', {hash:response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                    if (err) {\n                        console.log(err);\n                        socket.destroy();\n                    }\n                });\n            });\n        });\n\n        socket.on('connect', function (status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                const state = getState();\n                let chat_id = state.chatwidget.getIn(['chatData','id']);\n                window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                    socket.emit('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                        if (err) {\n                            console.log(err);\n                            socket.destroy();\n                        } else {\n                            connectVisitor();\n                        }\n                    });\n                });\n            }\n        });\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"sourceRoot":""}